# Copyright 2017 The Openstack-Helm Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for keystone.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

labels:
  api:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  job:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled

release_group: null

images:
  tags:
    bootstrap: docker.io/openstackhelm/heat:newton
    test: docker.io/kolla/ubuntu-source-rally:4.0.0
    db_init: docker.io/openstackhelm/heat:newton
    keystone_db_sync: docker.io/openstackhelm/keystone:newton
    db_drop: docker.io/openstackhelm/heat:newton
    ks_user: docker.io/openstackhelm/heat:newton
    rabbit_init: docker.io/rabbitmq:3.7-management
    keystone_fernet_setup: docker.io/openstackhelm/keystone:newton
    keystone_fernet_rotate: docker.io/openstackhelm/keystone:newton
    keystone_credential_setup: docker.io/openstackhelm/keystone:newton
    keystone_credential_rotate: docker.io/openstackhelm/keystone:newton
    keystone_api: docker.io/openstackhelm/keystone:newton
    keystone_domain_manage: docker.io/openstackhelm/keystone:newton
    dep_check: quay.io/stackanetes/kubernetes-entrypoint:v0.3.1
    image_repo_sync: docker.io/docker:17.07.0
  pull_policy: "IfNotPresent"
  local_registry:
    active: false
    exclude:
      - dep_check
      - image_repo_sync

bootstrap:
  enabled: true
  ks_user: admin
  script: |
    #NOTE(gagehugo): As of Rocky, keystone creates a member role by default
    openstack role create --or-show member
    openstack role add \
          --user="${OS_USERNAME}" \
          --user-domain="${OS_USER_DOMAIN_NAME}" \
          --project-domain="${OS_PROJECT_DOMAIN_NAME}" \
          --project="${OS_PROJECT_NAME}" \
          "member"

    #NOTE(portdirect): required for all users who operate heat stacks
    openstack role create --or-show heat_stack_owner
    openstack role add \
          --user="${OS_USERNAME}" \
          --user-domain="${OS_USER_DOMAIN_NAME}" \
          --project-domain="${OS_PROJECT_DOMAIN_NAME}" \
          --project="${OS_PROJECT_NAME}" \
          "heat_stack_owner"

network:
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    external_policy_local: false
    node_port:
      enabled: false
      port: 30500
  admin:
    node_port:
      enabled: false
      port: 30357

dependencies:
  dynamic:
    common:
      local_image_registry:
        jobs:
          - keystone-image-repo-sync
        services:
          - endpoint: node
            service: local_image_registry
  static:
    api:
      jobs:
        - keystone-db-sync
        - keystone-credential-setup
        - keystone-fernet-setup
        - keystone-rabbit-init
      services:
        - endpoint: internal
          service: oslo_cache
        - endpoint: internal
          service: oslo_db
    bootstrap:
      jobs:
        - keystone-domain-manage
      services:
        - endpoint: internal
          service: identity
    credential_rotate:
      jobs:
        - keystone-credential-setup
    credential_setup: null
    db_drop:
      services:
        - endpoint: internal
          service: oslo_db
    db_init:
      services:
        - endpoint: internal
          service: oslo_db
    db_sync:
      jobs:
        - keystone-db-init
        - keystone-credential-setup
        - keystone-fernet-setup
        - keystone-rabbit-init
      services:
        - endpoint: internal
          service: oslo_db
    rabbit_init:
      services:
        - service: oslo_messaging
          endpoint: internal
    domain_manage:
      services:
        - endpoint: internal
          service: identity
    fernet_rotate:
      jobs:
        - keystone-fernet-setup
    fernet_setup: null
    tests:
      services:
        - endpoint: internal
          service: identity
    image_repo_sync:
      services:
        - endpoint: internal
          service: local_image_registry

pod:
  affinity:
    anti:
      type:
        default: preferredDuringSchedulingIgnoredDuringExecution
      topologyKey:
        default: kubernetes.io/hostname
  mounts:
    keystone_db_init:
      init_container: null
      keystone_db_init:
    keystone_db_sync:
      init_container: null
      keystone_db_sync:
    keystone_api:
      init_container: null
      keystone_api:
    keystone_tests:
      init_container: null
      keystone_tests:
    keystone_bootstrap:
      init_container: null
      keystone_bootstrap:
    keystone_fernet_setup:
      init_container: null
      keystone_fernet_setup:
    keystone_fernet_rotate:
      init_container: null
      keystone_fernet_rotate:
    keystone_credential_setup:
      init_container: null
      keystone_credential_setup:
    keystone_credential_rotate:
      init_container: null
      keystone_credential_rotate:
    keystone_domain_manage:
      init_container: null
      keystone_domain_manage:
  replicas:
    api: 1
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
    disruption_budget:
      api:
        min_available: 0
    termination_grace_period:
      api:
        timeout: 30
  resources:
    enabled: false
    api:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      domain_manage:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_drop:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      rabbit_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      tests:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      fernet_setup:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      fernet_rotate:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      credential_setup:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      credential_rotate:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      image_repo_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

jobs:
  fernet_setup:
    user: keystone
    group: keystone
  fernet_rotate:
    # NOTE(rk760n): key rotation frequency, token expiration, active keys should statisfy the formula
    # max_active_keys = (token_expiration / rotation_frequency) + 2
    # as expiration is 12h, and max_active_keys set to 3 by default, rotation_frequency need to be adjusted
    # 12 hours
    cron: "0 */12 * * *"
    user: keystone
    group: keystone
    history:
      success: 3
      failed: 1
  credential_setup:
    user: keystone
    group: keystone
  credential_rotate:
    # monthly
    cron: "0 0 1 * *"
    migrate_wait: 120
    user: keystone
    group: keystone
    history:
      success: 3
      failed: 1

conf:
  keystone:
    DEFAULT:
      log_config_append: /etc/keystone/logging.conf
      max_token_size: 255
      debug: False
      #NOTE(rk760n): if you need auth notifications to be sent, uncomment it
      #notification_opt_out: ""
    token:
      provider: fernet
      # 12 hours
      expiration: 43200
    identity:
      domain_specific_drivers_enabled: True
      domain_config_dir: /etc/keystonedomains
    fernet_tokens:
      key_repository: /etc/keystone/fernet-keys/
    credential:
      key_repository: /etc/keystone/credential-keys/
    database:
      max_retries: -1
    cache:
      enabled: true
      backend: dogpile.cache.memcached
    oslo_messaging_notifications:
      driver: messagingv2
  # NOTE(lamt) We can leverage multiple domains with different
  # configurations as outlined in
  # https://docs.openstack.org/keystone/pike/admin/identity-domain-specific-config.html.
  # A sample of the value override can be found in sample file:
  # tools/overrides/example/keystone_domain_config.yaml
  # ks_domains:
  paste:
    filter:debug:
      use: egg:oslo.middleware#debug
    filter:request_id:
      use: egg:oslo.middleware#request_id
    filter:build_auth_context:
      use: egg:keystone#build_auth_context
    filter:token_auth:
      use: egg:keystone#token_auth
    filter:json_body:
      use: egg:keystone#json_body
    filter:cors:
      use: egg:oslo.middleware#cors
      oslo_config_project: keystone
    filter:http_proxy_to_wsgi:
      use: egg:oslo.middleware#http_proxy_to_wsgi
    filter:ec2_extension:
      use: egg:keystone#ec2_extension
    filter:ec2_extension_v3:
      use: egg:keystone#ec2_extension_v3
    filter:s3_extension:
      use: egg:keystone#s3_extension
    filter:url_normalize:
      use: egg:keystone#url_normalize
    filter:sizelimit:
      use: egg:oslo.middleware#sizelimit
    filter:osprofiler:
      use: egg:osprofiler#osprofiler
    app:public_service:
      use: egg:keystone#public_service
    app:service_v3:
      use: egg:keystone#service_v3
    app:admin_service:
      use: egg:keystone#admin_service
    pipeline:public_api:
      pipeline: cors sizelimit http_proxy_to_wsgi osprofiler url_normalize request_id build_auth_context token_auth json_body ec2_extension public_service
    pipeline:admin_api:
      pipeline: cors sizelimit http_proxy_to_wsgi osprofiler url_normalize request_id build_auth_context token_auth json_body ec2_extension s3_extension admin_service
    pipeline:api_v3:
      pipeline: cors sizelimit http_proxy_to_wsgi osprofiler url_normalize request_id build_auth_context token_auth json_body ec2_extension_v3 s3_extension service_v3
    app:public_version_service:
      use: egg:keystone#public_version_service
    app:admin_version_service:
      use: egg:keystone#admin_version_service
    pipeline:public_version_api:
      pipeline: cors sizelimit osprofiler url_normalize public_version_service
    pipeline:admin_version_api:
      pipeline: cors sizelimit osprofiler url_normalize admin_version_service
    composite:main:
      use: egg:Paste#urlmap
      /v2.0: public_api
      /v3: api_v3
      /: public_version_api
    composite:admin:
      use: egg:Paste#urlmap
      /v2.0: admin_api
      /v3: api_v3
      /: admin_version_api
  policy:
    admin_required: role:admin
    cloud_admin: role:admin and (is_admin_project:True or domain_id:default)
    service_role: role:service
    service_or_admin: rule:admin_required or rule:service_role
    owner: user_id:%(user_id)s or user_id:%(target.token.user_id)s
    admin_or_owner: (rule:admin_required and domain_id:%(target.token.user.domain.id)s) or rule:owner
    admin_and_matching_domain_id: rule:admin_required and domain_id:%(domain_id)s
    service_admin_or_owner: rule:service_or_admin or rule:owner
    default: rule:admin_required
    identity:get_region: ''
    identity:list_regions: ''
    identity:create_region: rule:cloud_admin
    identity:update_region: rule:cloud_admin
    identity:delete_region: rule:cloud_admin
    identity:get_service: rule:admin_required
    identity:list_services: rule:admin_required
    identity:create_service: rule:cloud_admin
    identity:update_service: rule:cloud_admin
    identity:delete_service: rule:cloud_admin
    identity:get_endpoint: rule:admin_required
    identity:list_endpoints: rule:admin_required
    identity:create_endpoint: rule:cloud_admin
    identity:update_endpoint: rule:cloud_admin
    identity:delete_endpoint: rule:cloud_admin
    identity:get_registered_limit: ''
    identity:list_registered_limits: ''
    identity:create_registered_limits: rule:admin_required
    identity:update_registered_limits: rule:admin_required
    identity:delete_registered_limit: rule:admin_required
    identity:get_limit: ''
    identity:list_limits: ''
    identity:create_limits: rule:admin_required
    identity:update_limits: rule:admin_required
    identity:delete_limit: rule:admin_required
    identity:get_domain: rule:cloud_admin or rule:admin_and_matching_domain_id or token.project.domain.id:%(target.domain.id)s
    identity:list_domains: rule:cloud_admin
    identity:create_domain: rule:cloud_admin
    identity:update_domain: rule:cloud_admin
    identity:delete_domain: rule:cloud_admin
    admin_and_matching_target_project_domain_id: rule:admin_required and domain_id:%(target.project.domain_id)s
    admin_and_matching_project_domain_id: rule:admin_required and domain_id:%(project.domain_id)s
    identity:get_project: rule:cloud_admin or rule:admin_and_matching_target_project_domain_id or project_id:%(target.project.id)s
    identity:list_projects: rule:cloud_admin or rule:admin_and_matching_domain_id
    identity:list_user_projects: rule:owner or rule:admin_and_matching_domain_id
    identity:create_project: rule:cloud_admin or rule:admin_and_matching_project_domain_id
    identity:update_project: rule:cloud_admin or rule:admin_and_matching_target_project_domain_id
    identity:delete_project: rule:cloud_admin or rule:admin_and_matching_target_project_domain_id
    identity:create_project_tag: rule:admin_required
    identity:delete_project_tag: rule:admin_required
    identity:get_project_tag: rule:admin_required
    identity:list_project_tags: rule:admin_required
    identity:delete_project_tags: rule:admin_required
    identity:update_project_tags: rule:admin_required
    admin_and_matching_target_user_domain_id: rule:admin_required and domain_id:%(target.user.domain_id)s
    admin_and_matching_user_domain_id: rule:admin_required and domain_id:%(user.domain_id)s
    identity:get_user: rule:cloud_admin or rule:admin_and_matching_target_user_domain_id or rule:owner
    identity:list_users: rule:cloud_admin or rule:admin_and_matching_domain_id
    identity:create_user: rule:cloud_admin or rule:admin_and_matching_user_domain_id
    identity:update_user: rule:cloud_admin or rule:admin_and_matching_target_user_domain_id
    identity:delete_user: rule:cloud_admin or rule:admin_and_matching_target_user_domain_id
    admin_and_matching_target_group_domain_id: rule:admin_required and domain_id:%(target.group.domain_id)s
    admin_and_matching_group_domain_id: rule:admin_required and domain_id:%(group.domain_id)s
    identity:get_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:list_groups: rule:cloud_admin or rule:admin_and_matching_domain_id
    identity:list_groups_for_user: rule:owner or rule:admin_and_matching_target_user_domain_id
    identity:create_group: rule:cloud_admin or rule:admin_and_matching_group_domain_id
    identity:update_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:delete_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:list_users_in_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:remove_user_from_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:check_user_in_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:add_user_to_group: rule:cloud_admin or rule:admin_and_matching_target_group_domain_id
    identity:get_credential: rule:admin_required
    identity:list_credentials: rule:admin_required or user_id:%(user_id)s
    identity:create_credential: rule:admin_required
    identity:update_credential: rule:admin_required
    identity:delete_credential: rule:admin_required
    identity:ec2_get_credential: rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)
    identity:ec2_list_credentials: rule:admin_required or rule:owner
    identity:ec2_create_credential: rule:admin_required or rule:owner
    identity:ec2_delete_credential: rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)
    identity:get_role: rule:admin_required
    identity:list_roles: rule:admin_required
    identity:create_role: rule:cloud_admin
    identity:update_role: rule:cloud_admin
    identity:delete_role: rule:cloud_admin
    identity:get_domain_role: rule:cloud_admin or rule:get_domain_roles
    identity:list_domain_roles: rule:cloud_admin or rule:list_domain_roles
    identity:create_domain_role: rule:cloud_admin or rule:domain_admin_matches_domain_role
    identity:update_domain_role: rule:cloud_admin or rule:domain_admin_matches_target_domain_role
    identity:delete_domain_role: rule:cloud_admin or rule:domain_admin_matches_target_domain_role
    domain_admin_matches_domain_role: rule:admin_required and domain_id:%(role.domain_id)s
    get_domain_roles: rule:domain_admin_matches_target_domain_role or rule:project_admin_matches_target_domain_role
    domain_admin_matches_target_domain_role: rule:admin_required and domain_id:%(target.role.domain_id)s
    project_admin_matches_target_domain_role: rule:admin_required and project_domain_id:%(target.role.domain_id)s
    list_domain_roles: rule:domain_admin_matches_filter_on_list_domain_roles or rule:project_admin_matches_filter_on_list_domain_roles
    domain_admin_matches_filter_on_list_domain_roles: rule:admin_required and domain_id:%(domain_id)s
    project_admin_matches_filter_on_list_domain_roles: rule:admin_required and project_domain_id:%(domain_id)s
    admin_and_matching_prior_role_domain_id: rule:admin_required and domain_id:%(target.prior_role.domain_id)s
    implied_role_matches_prior_role_domain_or_global: (domain_id:%(target.implied_role.domain_id)s or None:%(target.implied_role.domain_id)s)
    identity:get_implied_role: rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id
    identity:list_implied_roles: rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id
    identity:create_implied_role: rule:cloud_admin or (rule:admin_and_matching_prior_role_domain_id and rule:implied_role_matches_prior_role_domain_or_global)
    identity:delete_implied_role: rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id
    identity:list_role_inference_rules: rule:cloud_admin
    identity:check_implied_role: rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id
    identity:list_system_grants_for_user: rule:admin_required
    identity:check_system_grant_for_user: rule:admin_required
    identity:create_system_grant_for_user: rule:admin_required
    identity:revoke_system_grant_for_user: rule:admin_required
    identity:list_system_grants_for_group: rule:admin_required
    identity:check_system_grant_for_group: rule:admin_required
    identity:create_system_grant_for_group: rule:admin_required
    identity:revoke_system_grant_for_group: rule:admin_required
    identity:check_grant: rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants
    identity:list_grants: rule:cloud_admin or rule:domain_admin_for_list_grants or rule:project_admin_for_list_grants
    identity:create_grant: rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants
    identity:revoke_grant: rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants
    domain_admin_for_grants: rule:domain_admin_for_global_role_grants or rule:domain_admin_for_domain_role_grants
    domain_admin_for_global_role_grants: rule:admin_required and None:%(target.role.domain_id)s and rule:domain_admin_grant_match
    domain_admin_for_domain_role_grants: rule:admin_required and domain_id:%(target.role.domain_id)s and rule:domain_admin_grant_match
    domain_admin_grant_match: domain_id:%(domain_id)s or domain_id:%(target.project.domain_id)s
    project_admin_for_grants: rule:project_admin_for_global_role_grants or rule:project_admin_for_domain_role_grants
    project_admin_for_global_role_grants: rule:admin_required and None:%(target.role.domain_id)s and project_id:%(project_id)s
    project_admin_for_domain_role_grants: rule:admin_required and project_domain_id:%(target.role.domain_id)s and project_id:%(project_id)s
    domain_admin_for_list_grants: rule:admin_required and rule:domain_admin_grant_match
    project_admin_for_list_grants: rule:admin_required and project_id:%(project_id)s
    admin_on_domain_filter: rule:admin_required and domain_id:%(scope.domain.id)s
    admin_on_project_filter: rule:admin_required and project_id:%(scope.project.id)s
    admin_on_domain_of_project_filter: rule:admin_required and domain_id:%(target.project.domain_id)s
    identity:list_role_assignments: rule:cloud_admin or rule:admin_on_domain_filter or rule:admin_on_project_filter
    identity:list_role_assignments_for_tree: rule:cloud_admin or rule:admin_on_domain_of_project_filter
    identity:get_policy: rule:cloud_admin
    identity:list_policies: rule:cloud_admin
    identity:create_policy: rule:cloud_admin
    identity:update_policy: rule:cloud_admin
    identity:delete_policy: rule:cloud_admin
    identity:check_token: rule:admin_or_owner
    identity:validate_token: rule:service_admin_or_owner
    identity:validate_token_head: rule:service_or_admin
    identity:revocation_list: rule:service_or_admin
    identity:revoke_token: rule:admin_or_owner
    identity:create_trust: user_id:%(trust.trustor_user_id)s
    identity:list_trusts: ''
    identity:list_roles_for_trust: ''
    identity:get_role_for_trust: ''
    identity:delete_trust: ''
    identity:get_trust: ''
    identity:create_consumer: rule:admin_required
    identity:get_consumer: rule:admin_required
    identity:list_consumers: rule:admin_required
    identity:delete_consumer: rule:admin_required
    identity:update_consumer: rule:admin_required
    identity:authorize_request_token: rule:admin_required
    identity:list_access_token_roles: rule:admin_required
    identity:get_access_token_role: rule:admin_required
    identity:list_access_tokens: rule:admin_required
    identity:get_access_token: rule:admin_required
    identity:delete_access_token: rule:admin_required
    identity:list_projects_for_endpoint: rule:admin_required
    identity:add_endpoint_to_project: rule:admin_required
    identity:check_endpoint_in_project: rule:admin_required
    identity:list_endpoints_for_project: rule:admin_required
    identity:remove_endpoint_from_project: rule:admin_required
    identity:create_endpoint_group: rule:admin_required
    identity:list_endpoint_groups: rule:admin_required
    identity:get_endpoint_group: rule:admin_required
    identity:update_endpoint_group: rule:admin_required
    identity:delete_endpoint_group: rule:admin_required
    identity:list_projects_associated_with_endpoint_group: rule:admin_required
    identity:list_endpoints_associated_with_endpoint_group: rule:admin_required
    identity:get_endpoint_group_in_project: rule:admin_required
    identity:list_endpoint_groups_for_project: rule:admin_required
    identity:add_endpoint_group_to_project: rule:admin_required
    identity:remove_endpoint_group_from_project: rule:admin_required
    identity:create_identity_provider: rule:cloud_admin
    identity:list_identity_providers: rule:cloud_admin
    identity:get_identity_provider: rule:cloud_admin
    identity:update_identity_provider: rule:cloud_admin
    identity:delete_identity_provider: rule:cloud_admin
    identity:create_protocol: rule:cloud_admin
    identity:update_protocol: rule:cloud_admin
    identity:get_protocol: rule:cloud_admin
    identity:list_protocols: rule:cloud_admin
    identity:delete_protocol: rule:cloud_admin
    identity:create_mapping: rule:cloud_admin
    identity:get_mapping: rule:cloud_admin
    identity:list_mappings: rule:cloud_admin
    identity:delete_mapping: rule:cloud_admin
    identity:update_mapping: rule:cloud_admin
    identity:create_service_provider: rule:cloud_admin
    identity:list_service_providers: rule:cloud_admin
    identity:get_service_provider: rule:cloud_admin
    identity:update_service_provider: rule:cloud_admin
    identity:delete_service_provider: rule:cloud_admin
    identity:get_auth_catalog: ''
    identity:get_auth_projects: ''
    identity:get_auth_domains: ''
    identity:get_auth_system: ''
    identity:list_projects_for_user: ''
    identity:list_domains_for_user: ''
    identity:list_revoke_events: rule:service_or_admin
    identity:create_policy_association_for_endpoint: rule:cloud_admin
    identity:check_policy_association_for_endpoint: rule:cloud_admin
    identity:delete_policy_association_for_endpoint: rule:cloud_admin
    identity:create_policy_association_for_service: rule:cloud_admin
    identity:check_policy_association_for_service: rule:cloud_admin
    identity:delete_policy_association_for_service: rule:cloud_admin
    identity:create_policy_association_for_region_and_service: rule:cloud_admin
    identity:check_policy_association_for_region_and_service: rule:cloud_admin
    identity:delete_policy_association_for_region_and_service: rule:cloud_admin
    identity:get_policy_for_endpoint: rule:cloud_admin
    identity:list_endpoints_for_policy: rule:cloud_admin
    identity:create_domain_config: rule:cloud_admin
    identity:get_domain_config: rule:cloud_admin
    identity:get_security_compliance_domain_config: 
    identity:update_domain_config: rule:cloud_admin
    identity:delete_domain_config: rule:cloud_admin
    identity:get_domain_config_default: rule:cloud_admin
    identity:get_application_credential: rule:admin_or_owner
    identity:list_application_credentials: rule:admin_or_owner
    identity:create_application_credential: rule:admin_or_owner
    identity:delete_application_credential: rule:admin_or_owner
  oldpolicy:
    admin_required: role:admin or is_admin:1
    service_role: role:service
    service_or_admin: rule:admin_required or rule:service_role
    owner: user_id:%(user_id)s
    admin_or_owner: rule:admin_required or rule:owner
    token_subject: user_id:%(target.token.user_id)s
    admin_or_token_subject: rule:admin_required or rule:token_subject
    service_admin_or_token_subject: rule:service_or_admin or rule:token_subject
    default: rule:admin_required
    identity:get_region: ''
    identity:list_regions: ''
    identity:create_region: rule:admin_required
    identity:update_region: rule:admin_required
    identity:delete_region: rule:admin_required
    identity:get_service: rule:admin_required
    identity:list_services: rule:admin_required
    identity:create_service: rule:admin_required
    identity:update_service: rule:admin_required
    identity:delete_service: rule:admin_required
    identity:get_endpoint: rule:admin_required
    identity:list_endpoints: rule:admin_required
    identity:create_endpoint: rule:admin_required
    identity:update_endpoint: rule:admin_required
    identity:delete_endpoint: rule:admin_required
    identity:get_domain: rule:admin_required or token.project.domain.id:%(target.domain.id)s
    identity:list_domains: rule:admin_required
    identity:create_domain: rule:admin_required
    identity:update_domain: rule:admin_required
    identity:delete_domain: rule:admin_required
    identity:get_project: rule:admin_required or project_id:%(target.project.id)s
    identity:list_projects: rule:admin_required
    identity:list_user_projects: rule:admin_or_owner
    identity:create_project: rule:admin_required
    identity:update_project: rule:admin_required
    identity:delete_project: rule:admin_required
    identity:get_user: rule:admin_or_owner
    identity:list_users: rule:admin_required
    identity:create_user: rule:admin_required
    identity:update_user: rule:admin_required
    identity:delete_user: rule:admin_required
    identity:change_password: rule:admin_or_owner
    identity:get_group: rule:admin_required
    identity:list_groups: rule:admin_required
    identity:list_groups_for_user: rule:admin_or_owner
    identity:create_group: rule:admin_required
    identity:update_group: rule:admin_required
    identity:delete_group: rule:admin_required
    identity:list_users_in_group: rule:admin_required
    identity:remove_user_from_group: rule:admin_required
    identity:check_user_in_group: rule:admin_required
    identity:add_user_to_group: rule:admin_required
    identity:get_credential: rule:admin_required
    identity:list_credentials: rule:admin_required
    identity:create_credential: rule:admin_required
    identity:update_credential: rule:admin_required
    identity:delete_credential: rule:admin_required
    identity:ec2_get_credential: rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)
    identity:ec2_list_credentials: rule:admin_or_owner
    identity:ec2_create_credential: rule:admin_or_owner
    identity:ec2_delete_credential: rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)
    identity:get_role: rule:admin_required
    identity:list_roles: rule:admin_required
    identity:create_role: rule:admin_required
    identity:update_role: rule:admin_required
    identity:delete_role: rule:admin_required
    identity:get_domain_role: rule:admin_required
    identity:list_domain_roles: rule:admin_required
    identity:create_domain_role: rule:admin_required
    identity:update_domain_role: rule:admin_required
    identity:delete_domain_role: rule:admin_required
    identity:get_implied_role: 'rule:admin_required '
    identity:list_implied_roles: rule:admin_required
    identity:create_implied_role: rule:admin_required
    identity:delete_implied_role: rule:admin_required
    identity:list_role_inference_rules: rule:admin_required
    identity:check_implied_role: rule:admin_required
    identity:check_grant: rule:admin_required
    identity:list_grants: rule:admin_required
    identity:create_grant: rule:admin_required
    identity:revoke_grant: rule:admin_required
    identity:list_role_assignments: rule:admin_required
    identity:list_role_assignments_for_tree: rule:admin_required
    identity:get_policy: rule:admin_required
    identity:list_policies: rule:admin_required
    identity:create_policy: rule:admin_required
    identity:update_policy: rule:admin_required
    identity:delete_policy: rule:admin_required
    identity:check_token: rule:admin_or_token_subject
    identity:validate_token: rule:service_admin_or_token_subject
    identity:validate_token_head: rule:service_or_admin
    identity:revocation_list: rule:service_or_admin
    identity:revoke_token: rule:admin_or_token_subject
    identity:create_trust: user_id:%(trust.trustor_user_id)s
    identity:list_trusts: ''
    identity:list_roles_for_trust: ''
    identity:get_role_for_trust: ''
    identity:delete_trust: ''
    identity:create_consumer: rule:admin_required
    identity:get_consumer: rule:admin_required
    identity:list_consumers: rule:admin_required
    identity:delete_consumer: rule:admin_required
    identity:update_consumer: rule:admin_required
    identity:authorize_request_token: rule:admin_required
    identity:list_access_token_roles: rule:admin_required
    identity:get_access_token_role: rule:admin_required
    identity:list_access_tokens: rule:admin_required
    identity:get_access_token: rule:admin_required
    identity:delete_access_token: rule:admin_required
    identity:list_projects_for_endpoint: rule:admin_required
    identity:add_endpoint_to_project: rule:admin_required
    identity:check_endpoint_in_project: rule:admin_required
    identity:list_endpoints_for_project: rule:admin_required
    identity:remove_endpoint_from_project: rule:admin_required
    identity:create_endpoint_group: rule:admin_required
    identity:list_endpoint_groups: rule:admin_required
    identity:get_endpoint_group: rule:admin_required
    identity:update_endpoint_group: rule:admin_required
    identity:delete_endpoint_group: rule:admin_required
    identity:list_projects_associated_with_endpoint_group: rule:admin_required
    identity:list_endpoints_associated_with_endpoint_group: rule:admin_required
    identity:get_endpoint_group_in_project: rule:admin_required
    identity:list_endpoint_groups_for_project: rule:admin_required
    identity:add_endpoint_group_to_project: rule:admin_required
    identity:remove_endpoint_group_from_project: rule:admin_required
    identity:create_identity_provider: rule:admin_required
    identity:list_identity_providers: rule:admin_required
    identity:get_identity_providers: rule:admin_required
    identity:update_identity_provider: rule:admin_required
    identity:delete_identity_provider: rule:admin_required
    identity:create_protocol: rule:admin_required
    identity:update_protocol: rule:admin_required
    identity:get_protocol: rule:admin_required
    identity:list_protocols: rule:admin_required
    identity:delete_protocol: rule:admin_required
    identity:create_mapping: rule:admin_required
    identity:get_mapping: rule:admin_required
    identity:list_mappings: rule:admin_required
    identity:delete_mapping: rule:admin_required
    identity:update_mapping: rule:admin_required
    identity:create_service_provider: rule:admin_required
    identity:list_service_providers: rule:admin_required
    identity:get_service_provider: rule:admin_required
    identity:update_service_provider: rule:admin_required
    identity:delete_service_provider: rule:admin_required
    identity:get_auth_catalog: ''
    identity:get_auth_projects: ''
    identity:get_auth_domains: ''
    identity:list_projects_for_user: ''
    identity:list_domains_for_user: ''
    identity:list_revoke_events: ''
    identity:create_policy_association_for_endpoint: rule:admin_required
    identity:check_policy_association_for_endpoint: rule:admin_required
    identity:delete_policy_association_for_endpoint: rule:admin_required
    identity:create_policy_association_for_service: rule:admin_required
    identity:check_policy_association_for_service: rule:admin_required
    identity:delete_policy_association_for_service: rule:admin_required
    identity:create_policy_association_for_region_and_service: rule:admin_required
    identity:check_policy_association_for_region_and_service: rule:admin_required
    identity:delete_policy_association_for_region_and_service: rule:admin_required
    identity:get_policy_for_endpoint: rule:admin_required
    identity:list_endpoints_for_policy: rule:admin_required
    identity:create_domain_config: rule:admin_required
    identity:get_domain_config: rule:admin_required
    identity:update_domain_config: rule:admin_required
    identity:delete_domain_config: rule:admin_required
    identity:get_domain_config_default: rule:admin_required
  rabbitmq:
    #NOTE(rk760n): adding rmq policy to mirror messages from notification queues and set expiration time for the ones
    policies:
      - vhost: "keystone"
        name: "ha_ttl_keystone"
        definition:
          #mirror messges to other nodes in rmq cluster
          ha-mode: "all"
          ha-sync-mode: "automatic"
          #70s
          message-ttl: 70000
        priority: 0
        apply-to: all
        pattern: '(notifications)\.'
  rally_tests:
    run_tempest: false
    tests:
      KeystoneBasic.add_and_remove_user_role:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.authenticate_user_and_validate_token:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_add_and_list_user_roles:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_ec2credential:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_role:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_delete_service:
        - args:
            description: test_description
            service_type: Rally_test_type
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_get_role:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_ec2credentials:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_services:
        - args:
            description: test_description
            service_type: Rally_test_type
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_tenants:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_and_list_users:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_delete_user:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_tenant:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_tenant_with_users:
        - args:
            users_per_tenant: 1
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_update_and_delete_tenant:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user_set_enabled_and_delete:
        - args:
            enabled: true
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
        - args:
            enabled: false
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.create_user_update_password:
        - args: {}
          runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
      KeystoneBasic.get_entities:
        - runner:
            concurrency: 1
            times: 1
            type: constant
          sla:
            failure_rate:
              max: 0
  mpm_event:
    override:
    append:
  wsgi_keystone:
    override:
    append:
  sso_callback_template:
    override:
    append:
  logging:
    loggers:
      keys:
        - root
        - keystone
    handlers:
      keys:
        - stdout
        - stderr
        - "null"
    formatters:
      keys:
        - context
        - default
    logger_root:
      level: WARNING
      handlers: null
    logger_keystone:
      level: INFO
      handlers:
        - stdout
        - stderr
      qualname: keystone
    logger_amqp:
      level: WARNING
      handlers: stderr
      qualname: amqp
    logger_amqplib:
      level: WARNING
      handlers: stderr
      qualname: amqplib
    logger_eventletwsgi:
      level: WARNING
      handlers: stderr
      qualname: eventlet.wsgi.server
    logger_sqlalchemy:
      level: WARNING
      handlers: stderr
      qualname: sqlalchemy
    logger_boto:
      level: WARNING
      handlers: stderr
      qualname: boto
    handler_null:
      class: logging.NullHandler
      formatter: default
      args: ()
    handler_stdout:
      class: StreamHandler
      args: (sys.stdout,)
      formatter: context
    handler_stderr:
      class: StreamHandler
      args: (sys.stderr,)
      formatter: context
    formatter_context:
      class: oslo_log.formatters.ContextFormatter
    formatter_default:
      format: "%(message)s"

# Names of secrets used by bootstrap and environmental checks
secrets:
  identity:
    admin: keystone-keystone-admin
    test: keystone-keystone-test
  oslo_db:
    admin: keystone-db-admin
    keystone: keystone-db-user
  oslo_messaging:
    admin: keystone-rabbitmq-admin
    keystone: keystone-rabbitmq-user
  ldap:
    tls: keystone-ldap-tls
  tls:
    identity:
      api:
        public: keystone-tls-public

# typically overridden by environmental
# values, but should include all endpoints
# required by this chart
endpoints:
  cluster_domain_suffix: cluster.local
  local_image_registry:
    name: docker-registry
    namespace: docker-registry
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        node: 5000
  identity:
    namespace: null
    name: keystone
    auth:
      admin:
        region_name: RegionOne
        username: admin
        password: password
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      test:
        role: admin
        region_name: RegionOne
        username: test
        password: password
        project_name: test
        user_domain_name: default
        project_domain_name: default
    hosts:
      default: keystone-api
      public: keystone
    host_fqdn_override:
      default: null
      # NOTE(portdirect): this chart supports TLS for fqdn over-ridden public
      # endpoints using the following format:
      # public:
      #   host: null
      #   tls:
      #     crt: null
      #     key: null
    path:
      default: /v3
    scheme:
      default: http
    port:
      admin:
        default: 35357
      api:
        default: 80
  oslo_db:
    namespace: null
    auth:
      admin:
        username: root
        password: password
      keystone:
        username: keystone
        password: password
    hosts:
      default: mariadb
    host_fqdn_override:
      default: null
    path: /keystone
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
  oslo_messaging:
    namespace: null
    auth:
      admin:
        username: rabbitmq
        password: password
      keystone:
        username: keystone
        password: password
    hosts:
      default: rabbitmq
    host_fqdn_override:
      default: null
    path: /keystone
    scheme: rabbit
    port:
      amqp:
        default: 5672
      http:
        default: 15672
  oslo_cache:
    namespace: null
    hosts:
      default: memcached
    host_fqdn_override:
      default: null
    port:
      memcache:
        default: 11211
  ldap:
    auth:
      client:
        tls:
          # NOTE(lamt): Specify a CA value here will place a LDAPS certificate at
          # /etc/certs/tls.ca.  To ensure keystone uses LDAPS, the
          # following key will need to be overrided under section [ldap] or the
          # correct domain-specific setting, else it will not be enabled:
          #
          #   use_tls: true
          #   tls_req_cert: allow # Valid values: demand, never, allow
          #   tls_cacertfile: /etc/certs/tls.ca # abs path to the CA cert
          ca: null
  fluentd:
    namespace: null
    name: fluentd
    hosts:
      default: fluentd-logging
    host_fqdn_override:
      default: null
    path:
      default: null
    scheme: 'http'
    port:
      service:
        default: 24224
      metrics:
        default: 24220

manifests:
  configmap_bin: true
  configmap_etc: true
  cron_credential_rotate: true
  cron_fernet_rotate: true
  deployment_api: true
  ingress_api: true
  job_bootstrap: true
  job_credential_setup: true
  job_db_init: true
  job_db_sync: true
  job_db_drop: false
  job_domain_manage: true
  job_fernet_setup: true
  job_image_repo_sync: true
  job_rabbit_init: true
  pdb_api: true
  pod_rally_test: true
  secret_credential_keys: true
  secret_db: true
  secret_fernet_keys: true
  secret_ingress_tls: true
  secret_keystone: true
  secret_rabbitmq: true
  service_ingress_api: true
  service_api: true
